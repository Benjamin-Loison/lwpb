
package test;

message MessagePrimitives {

  enum EnumType {
    ENUM_1 = 1;
    ENUM_2 = 2;
    ENUM_3 = 3;
    ENUM_4 = 4;
    ENUM_5 = 5;
  };

  optional double f_double = 1;
  optional float f_float = 2;
  optional int64 f_int64 = 3;
  optional uint64 f_uint64 = 4;
  optional int32 f_int32 = 5;
  optional fixed64 f_fixed64 = 6;
  optional fixed32 f_fixed32 = 7;
  optional bool f_bool = 8;
  optional string f_string = 9;
  optional bytes f_bytes = 12;
  optional uint32 f_uint32 = 13;
  optional EnumType f_enum = 14;
  optional sfixed32 f_sfixed32 = 15;
  optional sfixed64 f_sfixed64 = 16;
  optional sint32 f_sint32 = 17;
  optional sint64 f_sint64 = 18;
};

message MessageNested {
  repeated MessagePrimitives f_nested1 = 1;
  repeated MessagePrimitives f_nested2 = 2;
};

message MessageNestedInterleaved {
  required string f_field1 = 1;
  repeated MessagePrimitives f_nested2 = 2;
  optional string f_field3 = 3;
  repeated MessagePrimitives f_nested4 = 4;
  repeated int32 f_field5 = 5;
};

message MessageTreeNode {
  required string f_name = 1;
  optional string f_value = 2;
  repeated MessageTreeNode f_children = 3;
};

message MessagePacked {
  repeated double f_double = 1 [packed=true];
  repeated float f_float = 3 [packed=true];
  repeated int64 f_int64 = 4 [packed=true];
  repeated int32 f_int32 = 6 [packed=true];
  repeated fixed64 f_fixed64 = 8 [packed=true];
  repeated fixed32 f_fixed32 = 10 [packed=true];
};

message MessagePackedInterleaved {
  repeated double f_double_packed = 1 [packed=true];
  repeated double f_double = 2;
  repeated float f_float_packed = 3 [packed=true];
  repeated int64 f_int64_packed = 4 [packed=true];
  optional string f_string1 = 5;
  repeated int32 f_int32_packed = 6 [packed=true];
  optional string f_string2 = 7;
  repeated fixed64 f_fixed64_packed = 8 [packed=true];
  optional fixed64 f_fixed64 = 9;
  repeated fixed32 f_fixed32_packed = 10 [packed=true];
  optional string f_string3 = 11;
};

